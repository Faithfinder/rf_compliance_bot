import { b, fmt } from "@grammyjs/parse-mode";
import { Keyboard } from "grammy";
import type { Message } from "grammy/types";
import { bot } from "../config/bot";
import {
    formatChannelInfo,
    checkChannelRequirements,
    formatChannelRequirements,
    checkUserChannelPermissions,
} from "../utils";
import { getChannelSettings } from "../db/database";
import { addMessageToGroup, isMediaGroupValidated } from "../utils/media-groups";
import {
    extractMessageActor,
    validateMessageCompliance,
    createMediaGroupValidator,
    handleRejectionWithNotifications,
    reportChannelPostError,
    reportModerationError,
} from "./message-helpers";

export function registerMessageHandler(): void {
    bot.chatType("private").on("message", async (ctx) => {
        const userId = ctx.from?.id;

        if (!userId) {
            return ctx.reply("–ù–µ —É–¥–∞–µ—Ç—Å—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
        }

        const channelConfig = ctx.session.channelConfig;

        if (!channelConfig) {
            return ctx.reply(
                "–í—ã –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ –∫–∞–Ω–∞–ª.\n\n" +
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setchannel <@channel –∏–ª–∏ ID> –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.\n" +
                    "–ü—Ä–∏–º–µ—Ä: /setchannel @mychannel",
            );
        }

        const permissions = await checkUserChannelPermissions(channelConfig.channelId, userId);

        if (!permissions?.canEditMessages) {
            return ctx.reply(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª.\n\n" +
                    '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è" –º–æ–≥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞.\n\n' +
                    "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º —ç—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ.",
            );
        }

        const channelSettings = getChannelSettings(channelConfig.channelId);
        const foreignAgentBlurb = channelSettings?.foreignAgentBlurb;

        if (!foreignAgentBlurb) {
            const requirements = await checkChannelRequirements(channelConfig.channelId);

            let errorMessage = fmt`‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –ë–ª—É—Ä–± –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è ${formatChannelInfo(channelConfig.channelId, channelConfig.channelTitle)}\n\nüìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n${formatChannelRequirements(requirements)}\n\n`;
            errorMessage = fmt`${errorMessage}${fmt`${b}–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:${b}`} –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_fa_blurb <–≤–∞—à —Ç–µ–∫—Å—Ç> –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.\n\n–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞ –º–æ–≥—É—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.`;

            const entities = errorMessage.entities;
            return ctx.reply(errorMessage.text, entities.length ? { entities } : undefined);
        }

        const mediaGroupId = ctx.message.media_group_id;

        if (mediaGroupId) {
            if (isMediaGroupValidated(mediaGroupId)) {
                return;
            }

            addMessageToGroup(
                mediaGroupId,
                ctx.message,
                async (messages: Message[], approved: boolean) => {
                    if (approved) {
                        try {
                            const messageIds = messages.map((m) => m.message_id).sort((a, b) => a - b);
                            await ctx.api.copyMessages(channelConfig.channelId, ctx.chat.id, messageIds);

                            const successMessage = fmt`‚úÖ –ê–ª—å–±–æ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ ${formatChannelInfo(
                                channelConfig.channelId,
                                channelConfig.channelTitle,
                            )}`;
                            const entities = successMessage.entities;
                            await ctx.api.sendMessage(
                                ctx.chat.id,
                                successMessage.text,
                                entities.length ? { entities } : undefined,
                            );
                        } catch (error) {
                            reportChannelPostError(error, {
                                userId,
                                channelId: channelConfig.channelId,
                                channelTitle: channelConfig.channelTitle,
                                mediaGroupId,
                            });

                            const requirements = await checkChannelRequirements(channelConfig.channelId);
                            let errorMessage = fmt`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–ª—å–±–æ–º –≤ ${formatChannelInfo(channelConfig.channelId, channelConfig.channelTitle)}\n\nüìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n${formatChannelRequirements(requirements)}\n\n`;

                            if (!requirements.channelExists) {
                                errorMessage = fmt`${errorMessage}${fmt`${b}–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:${b}`} –ö–∞–Ω–∞–ª –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª.`;
                            } else if (!requirements.botIsAdded) {
                                errorMessage = fmt`${errorMessage}${fmt`${b}–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:${b}`} –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª.`;
                            } else if (!requirements.botCanPost) {
                                errorMessage = fmt`${errorMessage}${fmt`${b}–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:${b}`} –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –±–æ—Ç—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ "–ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è".`;
                            }

                            errorMessage = fmt`${errorMessage}\n\n–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setchannel –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥—Ä—É–≥–æ–≥–æ –∫–∞–Ω–∞–ª–∞`;

                            const entities = errorMessage.entities;
                            await ctx.api.sendMessage(
                                ctx.chat.id,
                                errorMessage.text,
                                entities.length ? { entities } : undefined,
                            );
                        }
                    } else {
                        const firstMessage = messages[0];
                        if (!firstMessage) {
                            return;
                        }

                        await handleRejectionWithNotifications({
                            channelId: channelConfig.channelId,
                            channelTitle: channelConfig.channelTitle,
                            rejectedMessageChatId: ctx.chat.id,
                            rejectedMessageId: firstMessage.message_id,
                            actor: {
                                id: userId,
                                displayName: ctx.from.first_name,
                                username: ctx.from.username,
                            },
                            excludeUserIds: [userId],
                        });

                        let errorMessage = fmt`‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–ª—å–±–æ–º: –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞.\n\nüåç ${fmt`${b}–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ç–µ–∫—Å—Ç:${b}`}\n${foreignAgentBlurb}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –∫ –≤–∞—à–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\n–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:`;

                        const messageIds = messages.map((m) => m.message_id).sort((a, b) => a - b);
                        await ctx.api.copyMessages(ctx.chat.id, ctx.chat.id, messageIds);

                        const entities = errorMessage.entities;
                        await ctx.api.sendMessage(
                            ctx.chat.id,
                            errorMessage.text,
                            entities.length ? { entities } : undefined,
                        );
                    }
                },
                createMediaGroupValidator(foreignAgentBlurb),
            );

            return;
        }

        if (!validateMessageCompliance(ctx.message, foreignAgentBlurb)) {
            await handleRejectionWithNotifications({
                channelId: channelConfig.channelId,
                channelTitle: channelConfig.channelTitle,
                rejectedMessageChatId: ctx.chat.id,
                rejectedMessageId: ctx.message.message_id,
                actor: {
                    id: userId,
                    displayName: ctx.from.first_name,
                    username: ctx.from.username,
                },
                excludeUserIds: [userId],
            });

            let errorMessage = fmt`‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞.\n\nüåç ${fmt`${b}–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ç–µ–∫—Å—Ç:${b}`}\n${foreignAgentBlurb}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –∫ –≤–∞—à–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\n–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:`;

            await ctx.api.copyMessage(ctx.chat.id, ctx.chat.id, ctx.message.message_id);

            const entities = errorMessage.entities;
            return await ctx.reply(errorMessage.text, entities.length ? { entities } : undefined);
        }

        try {
            await ctx.api.copyMessage(channelConfig.channelId, ctx.chat.id, ctx.message.message_id);

            const successMessage = fmt`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ ${formatChannelInfo(
                channelConfig.channelId,
                channelConfig.channelTitle,
            )}`;
            const entities = successMessage.entities;
            return ctx.reply(successMessage.text, entities.length ? { entities } : undefined);
        } catch (error) {
            reportChannelPostError(error, {
                userId,
                channelId: channelConfig.channelId,
                channelTitle: channelConfig.channelTitle,
            });

            const requirements = await checkChannelRequirements(channelConfig.channelId);

            let errorMessage = fmt`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ${formatChannelInfo(channelConfig.channelId, channelConfig.channelTitle)}\n\nüìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n${formatChannelRequirements(requirements)}\n\n`;

            if (!requirements.channelExists) {
                errorMessage = fmt`${errorMessage}${fmt`${b}–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:${b}`} –ö–∞–Ω–∞–ª –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª.`;

                const keyboard = new Keyboard()
                    .requestChat("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª", 1, {
                        chat_is_channel: true,
                        bot_is_member: true,
                    })
                    .text("/removechannel")
                    .resized()
                    .oneTime();

                ctx.session.awaitingChannelSelection = true;
                const entities = errorMessage.entities;
                return ctx.reply(errorMessage.text, {
                    reply_markup: keyboard,
                    ...(entities.length ? { entities } : {}),
                });
            } else if (!requirements.botIsAdded) {
                errorMessage = fmt`${errorMessage}${fmt`${b}–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:${b}`} –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª.`;
            } else if (!requirements.botCanPost) {
                errorMessage = fmt`${errorMessage}${fmt`${b}–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:${b}`} –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –±–æ—Ç—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ "–ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è".`;
            }

            errorMessage = fmt`${errorMessage}\n\n–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setchannel –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥—Ä—É–≥–æ–≥–æ –∫–∞–Ω–∞–ª–∞`;

            const entities = errorMessage.entities;
            return ctx.reply(errorMessage.text, entities.length ? { entities } : undefined);
        }
    });

    bot.chatType("channel").on("channel_post", async (ctx) => {
        const message = ctx.channelPost ?? ctx.msg;

        if (!message) {
            return;
        }

        const channelId = message.chat.id.toString();
        const channelTitle = message.chat.title;

        if (message.from && message.from.id === ctx.me.id) {
            return;
        }

        const channelSettings = getChannelSettings(channelId);
        const foreignAgentBlurb = channelSettings?.foreignAgentBlurb;

        if (!foreignAgentBlurb) {
            return;
        }

        const mediaGroupId = message.media_group_id;

        if (mediaGroupId) {
            if (isMediaGroupValidated(mediaGroupId)) {
                return;
            }

            addMessageToGroup(
                mediaGroupId,
                message,
                async (messages: Message[], approved: boolean) => {
                    if (approved) {
                        return;
                    }

                    const firstMessage = messages[0];
                    if (!firstMessage) {
                        return;
                    }

                    const actor = extractMessageActor(firstMessage);

                    await handleRejectionWithNotifications({
                        channelId,
                        channelTitle,
                        rejectedMessageChatId: firstMessage.chat.id,
                        rejectedMessageId: firstMessage.message_id,
                        actor,
                        includeAuthor: true,
                    });

                    try {
                        const messageIds = messages.map((m) => m.message_id).sort((a, b) => a - b);
                        await ctx.api.deleteMessages(message.chat.id, messageIds);
                    } catch (error) {
                        reportModerationError(error, {
                            channelId,
                            mediaGroupId,
                            messageCount: messages.length,
                            notificationTargets: 0,
                            notificationFailures: 0,
                        });
                    }
                },
                createMediaGroupValidator(foreignAgentBlurb),
            );

            return;
        }

        if (validateMessageCompliance(message, foreignAgentBlurb)) {
            return;
        }

        const actor = extractMessageActor(message);

        await handleRejectionWithNotifications({
            channelId,
            channelTitle,
            rejectedMessageChatId: message.chat.id,
            rejectedMessageId: message.message_id,
            actor,
            includeAuthor: true,
        });

        try {
            await ctx.api.deleteMessage(message.chat.id, message.message_id);
        } catch (error) {
            reportModerationError(error, {
                channelId,
                messageId: message.message_id,
                notificationTargets: 0,
                notificationFailures: 0,
            });

            return;
        }
    });
}
