import * as Sentry from "@sentry/bun";
import { Keyboard } from "grammy";
import { bot } from "../config/bot";
import {
    formatChannelInfo,
    checkChannelRequirements,
    formatChannelRequirements,
    checkUserChannelPermissions,
    escapeHtml,
} from "../utils";
import { getChannelSettings, getNotificationUsers } from "../db/database";

async function sendRejectionNotification(
    channelId: string,
    channelTitle: string | undefined,
    rejectedUserId: number,
    rejectedUserFirstName: string,
    rejectedUserHandle: string | undefined,
    rejectedMessageChatId: number,
    rejectedMessageId: number,
): Promise<void> {
    const notificationUserIds = getNotificationUsers(channelId).filter((id) => id !== rejectedUserId);

    if (notificationUserIds.length === 0) {
        return;
    }

    const timestamp = new Date().toLocaleString("ru-RU", {
        timeZone: "Europe/Moscow",
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
    });

    let notificationMessage = `üö´ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ</b>\n\n`;
    notificationMessage += `üì¢ <b>–ö–∞–Ω–∞–ª:</b> ${formatChannelInfo(channelId, channelTitle)}\n`;
    notificationMessage += `üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${escapeHtml(rejectedUserFirstName)}`;
    if (rejectedUserHandle) {
        notificationMessage += ` (@${escapeHtml(rejectedUserHandle)})`;
    }
    notificationMessage += `\nüÜî <b>ID:</b> <code>${escapeHtml(String(rejectedUserId))}</code>\n`;
    notificationMessage += `üïê <b>–í—Ä–µ–º—è:</b> ${escapeHtml(timestamp)}\n\n`;
    notificationMessage += `‚ùå <b>–ü—Ä–∏—á–∏–Ω–∞:</b> –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞\n\n`;
    notificationMessage += `üìù <b>–û—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>`;

    for (const notifyUserId of notificationUserIds) {
        try {
            await bot.api.sendMessage(notifyUserId, notificationMessage, {
                parse_mode: "HTML",
            });

            await bot.api.copyMessage(notifyUserId, rejectedMessageChatId, rejectedMessageId);
        } catch (error) {
            console.error(`Failed to send notification to user ${notifyUserId}:`, error);

            Sentry.withScope((scope) => {
                scope.setContext("notification_failure", {
                    channel_id: channelId,
                    notify_user_id: notifyUserId,
                    rejected_user_id: rejectedUserId,
                });
                scope.setTag("error_type", "notification_send_failed");
                Sentry.captureException(error);
            });
        }
    }
}

export function registerMessageHandler(): void {
    bot.chatType("private").on("message", async (ctx) => {
        const userId = ctx.from?.id;

        if (!userId) {
            return ctx.reply("–ù–µ —É–¥–∞–µ—Ç—Å—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
        }

        const channelConfig = ctx.session.channelConfig;

        if (!channelConfig) {
            return ctx.reply(
                "–í—ã –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ –∫–∞–Ω–∞–ª.\n\n" +
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setchannel <@channel –∏–ª–∏ ID> –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.\n" +
                    "–ü—Ä–∏–º–µ—Ä: /setchannel @mychannel",
            );
        }

        const permissions = await checkUserChannelPermissions(channelConfig.channelId, userId);

        if (!permissions?.canEditMessages) {
            return ctx.reply(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª.\n\n" +
                    '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è" –º–æ–≥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞.\n\n' +
                    "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º —ç—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ.",
            );
        }

        const channelSettings = getChannelSettings(channelConfig.channelId);
        const foreignAgentBlurb = channelSettings?.foreignAgentBlurb;

        if (!foreignAgentBlurb) {
            const requirements = await checkChannelRequirements(channelConfig.channelId);

            let errorMessage =
                `‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –ë–ª—É—Ä–± –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è ` +
                `${formatChannelInfo(channelConfig.channelId, channelConfig.channelTitle)}\n\n`;
            errorMessage += `üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n` + `${formatChannelRequirements(requirements)}\n\n`;
            errorMessage += `<b>–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:</b> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ${escapeHtml(
                "/set_fa_blurb <–≤–∞—à —Ç–µ–∫—Å—Ç>",
            )} –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.\n\n`;
            errorMessage += `–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞ –º–æ–≥—É—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.`;

            return ctx.reply(errorMessage, { parse_mode: "HTML" });
        }

        const messageText = ctx.message.text || ctx.message.caption;

        if (!messageText || !messageText.includes(foreignAgentBlurb)) {
            await sendRejectionNotification(
                channelConfig.channelId,
                channelConfig.channelTitle,
                userId,
                ctx.from.first_name,
                ctx.from.username,
                ctx.chat.id,
                ctx.message.message_id,
            );

            let errorMessage = `‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞.\n\n`;
            errorMessage += `üåç <b>–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ç–µ–∫—Å—Ç:</b>\n` + `${escapeHtml(foreignAgentBlurb)}\n\n`;
            errorMessage += `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –∫ –≤–∞—à–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\n`;
            errorMessage += `–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:`;

            await ctx.api.copyMessage(ctx.chat.id, ctx.chat.id, ctx.message.message_id);

            return await ctx.reply(errorMessage, { parse_mode: "HTML" });
        }

        try {
            await ctx.api.copyMessage(channelConfig.channelId, ctx.chat.id, ctx.message.message_id);

            return ctx.reply(
                `‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ ` + formatChannelInfo(channelConfig.channelId, channelConfig.channelTitle),
                { parse_mode: "HTML" },
            );
        } catch (error) {
            console.error("Error posting to channel:", error);

            Sentry.withScope((scope) => {
                scope.setContext("channel_post", {
                    user_id: userId,
                    channel_id: channelConfig.channelId,
                    channel_title: channelConfig.channelTitle,
                });
                scope.setTag("error_type", "channel_post_failed");
                Sentry.captureException(error);
            });

            const requirements = await checkChannelRequirements(channelConfig.channelId);

            let errorMessage =
                `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ` +
                `${formatChannelInfo(channelConfig.channelId, channelConfig.channelTitle)}\n\n`;
            errorMessage += `üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n` + `${formatChannelRequirements(requirements)}\n\n`;

            if (!requirements.channelExists) {
                errorMessage +=
                    "<b>–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:</b> –ö–∞–Ω–∞–ª –±–æ–ª—å—à–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª.";

                const keyboard = new Keyboard()
                    .requestChat("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª", 1, {
                        chat_is_channel: true,
                        bot_is_member: true,
                    })
                    .text("/removechannel")
                    .resized()
                    .oneTime();

                ctx.session.awaitingChannelSelection = true;
                return ctx.reply(errorMessage, { reply_markup: keyboard, parse_mode: "HTML" });
            } else if (!requirements.botIsAdded) {
                errorMessage +=
                    '<b>–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:</b> –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª.';
            } else if (!requirements.botCanPost) {
                errorMessage +=
                    '<b>–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:</b> –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –±–æ—Ç—É —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ "–ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è".';
            }

            errorMessage += `\n\n–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ${escapeHtml("/setchannel")} –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥—Ä—É–≥–æ–≥–æ –∫–∞–Ω–∞–ª–∞`;

            return ctx.reply(errorMessage, { parse_mode: "HTML" });
        }
    });
}
