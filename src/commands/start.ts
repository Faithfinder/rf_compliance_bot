import { bot } from "../config/bot";
import type { SessionContext } from "../config/session";
import { showChannelSelectionUI } from "./channel";
import { formatChannelInfo, escapeHtml } from "../utils";

export function registerStartCommand(): void {
    bot.command("start", async (ctx: SessionContext) => {
        const welcomeMessage =
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RF Compliance Bot! üëã\n\n–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –†–§ –æ–± –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–∞—Ö.";

        if (!ctx.session.channelConfig) {
            const { text, keyboard } = showChannelSelectionUI();

            ctx.session.awaitingChannelSelection = true;

            await ctx.reply(welcomeMessage);
            const setupPrompt =
                `–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞–Ω–∞–ª, –∫—É–¥–∞ —è –±—É–¥—É –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n` +
                text;
            return ctx.reply(setupPrompt, {
                reply_markup: keyboard,
                parse_mode: "HTML",
            });
        }

        const channelInfo = formatChannelInfo(
            ctx.session.channelConfig.channelId,
            ctx.session.channelConfig.channelTitle,
        );

        return ctx.reply(
            `${escapeHtml(welcomeMessage)}\n\n` +
                `‚úÖ –í–∞—à –∫–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${channelInfo}\n\n` +
                `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ${escapeHtml("/help")} –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.`,
            { parse_mode: "HTML" },
        );
    });
}
