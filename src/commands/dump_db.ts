import { existsSync } from "fs";
import { join } from "path";
import { InputFile } from "grammy";
import { bot } from "../config/bot";
import { getBotOwnerId } from "../config/environment";

const DATABASE_PATH = join(process.cwd(), "data", "channels.db");

export function registerDumpDbCommand(): void {
    const ownerId = getBotOwnerId();

    if (!ownerId) {
        console.warn("BOT_OWNER_ID is not set; /dump_db command will remain disabled.");
        return;
    }

    bot.command("dump_db", async (ctx) => {
        const userId = ctx.from?.id;

        if (!userId || userId !== ownerId) {
            console.warn(`Unauthorized /dump_db attempt by user ${userId ?? "unknown"}.`);
            return;
        }

        if (ctx.chat.type !== "private") {
            await ctx.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.");
            return;
        }

        if (!existsSync(DATABASE_PATH)) {
            await ctx.reply("–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }

        try {
            const file = new InputFile(DATABASE_PATH, "channels.db");
            await ctx.replyWithDocument(file, {
                caption: "üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.",
            });
        } catch (error) {
            console.error("Failed to send database dump:", error);
            await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.");
        }
    });
}
