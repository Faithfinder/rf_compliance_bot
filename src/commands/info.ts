import { FormattedString, b, code, fmt } from "@grammyjs/parse-mode";
import { bot } from "../config/bot";
import {
    checkChannelRequirements,
    formatChannelRequirements,
    checkUserChannelPermissions,
    formatChannelInfo,
} from "../utils";
import { getChannelSettings } from "../db/database";
import { isFixedChannelMode } from "../config/environment";

export function registerInfoCommand(): void {
    bot.command("info", async (ctx) => {
        const userId = ctx.from?.id;

        if (!userId || !ctx.from) {
            return ctx.reply("–ù–µ —É–¥–∞–µ—Ç—Å—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
        }

        const channelConfig = ctx.session.channelConfig;

        const sections: Array<string | FormattedString> = [];

        sections.push(fmt`ü§ñ ${fmt`${b}–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞${b}`}`);

        const usernamePart =
            ctx.from.username ?
                fmt` (@${ctx.from.username})`
            : undefined;
        const userLine = usernamePart ?
            fmt`üë§ ${fmt`${b}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:${b}`} ${ctx.from.first_name}${usernamePart}`
        :   fmt`üë§ ${fmt`${b}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:${b}`} ${ctx.from.first_name}`;
        const userIdLine = fmt`üì± ${fmt`${b}ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:${b}`} ${fmt`${code}${String(userId)}${code}`}`;
        sections.push(FormattedString.join([userLine, userIdLine], "\n"));

        if (channelConfig) {
            let channelSection = fmt`üì¢ ${fmt`${b}–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª:${b}`}\n${formatChannelInfo(channelConfig.channelId, channelConfig.channelTitle)}`;
            if (isFixedChannelMode()) {
                channelSection = fmt`${channelSection}\nüîí –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º)`;
            }
            sections.push(channelSection);

            const requirements = await checkChannelRequirements(channelConfig.channelId);

            sections.push(fmt`üìã ${fmt`${b}–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:${b}`}\n${formatChannelRequirements(requirements)}`);

            const channelSettings = getChannelSettings(channelConfig.channelId);

            if (channelSettings?.foreignAgentBlurb) {
                const settingsSection = fmt`‚öôÔ∏è ${fmt`${b}–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞:${b}`}\nüåç ${fmt`${b}–¢–µ–∫—Å—Ç –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞:${b}`}\n${channelSettings.foreignAgentBlurb}`;
                sections.push(settingsSection);
            }

            const userPermissions = await checkUserChannelPermissions(channelConfig.channelId, userId);

            if (userPermissions) {
                const permissionLines: Array<string | FormattedString> = [
                    fmt`üë§ ${fmt`${b}–í–∞—à–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:${b}`}`,
                    userPermissions.isMember ? "‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ –∫–∞–Ω–∞–ª–∞" : "‚ùå –ù–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞",
                ];

                if (userPermissions.isAdmin) {
                    permissionLines.push("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä");
                    if (userPermissions.canPostMessages) {
                        permissionLines.push(
                            "‚ö†Ô∏è –ú–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è (–≠—Ç–æ –ø—Ä–∞–≤–æ —Å–ª–µ–¥—É–µ—Ç —É–±—Ä–∞—Ç—å, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –æ–±—Ö–æ–¥ –±–æ—Ç–∞)",
                        );
                    }
                    if (userPermissions.canEditMessages) {
                        permissionLines.push("‚úÖ –ú–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è");
                    }
                    if (userPermissions.canManageChat) {
                        permissionLines.push("‚úÖ –ú–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —á–∞—Ç–æ–º");
                    }
                } else {
                    permissionLines.push("‚ùå –ù–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º");
                }

                sections.push(FormattedString.join(permissionLines, "\n"));
            }

            if (!isFixedChannelMode()) {
                sections.push("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /removechannel –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
            }
        } else {
            const channelLines: Array<string | FormattedString> = [
                fmt`üì¢ ${fmt`${b}–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª:${b}`} –ù–µ—Ç`,
                "‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
            ];
            if (!isFixedChannelMode()) {
                channelLines.push("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setchannel –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏");
            }
            sections.push(FormattedString.join(channelLines, "\n"));
        }

        const infoMessage = FormattedString.join(sections, "\n\n");
        const entities = infoMessage.entities;
        return ctx.reply(infoMessage.text, entities.length ? { entities } : undefined);
    });
}
