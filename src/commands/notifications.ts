import { Keyboard } from "grammy";
import { bot } from "../config/bot";
import type { SessionContext } from "../config/session";
import { addNotificationUser, removeNotificationUser, getNotificationUsers } from "../db/database";
import { checkUserChannelPermissions, formatChannelInfo, resolveUserIdentifier, escapeHtml } from "../utils";

interface ValidationResult {
    success: boolean;
    channelId?: string;
    channelTitle?: string;
}

type RequiredPermission = "isAdmin" | "canManageChat";

const permissionErrorMessages: Record<RequiredPermission, string> = {
    isAdmin: "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞ –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
    canManageChat:
        "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–ø–∏—Å–∫–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
};

async function validateNotificationAccess(
    ctx: SessionContext,
    requiredPermission: RequiredPermission = "canManageChat",
): Promise<ValidationResult> {
    const userId = ctx.from?.id;

    if (!userId) {
        await ctx.reply("–ù–µ —É–¥–∞–µ—Ç—Å—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
        return { success: false };
    }

    const channelConfig = ctx.session.channelConfig;

    if (!channelConfig) {
        await ctx.reply(
            "–í—ã –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ –∫–∞–Ω–∞–ª.\n\n" +
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setchannel <@channel –∏–ª–∏ ID> –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.\n" +
                "–ü—Ä–∏–º–µ—Ä: /setchannel @mychannel",
        );
        return { success: false };
    }

    const permissions = await checkUserChannelPermissions(channelConfig.channelId, userId);

    if (!permissions?.[requiredPermission]) {
        await ctx.reply(permissionErrorMessages[requiredPermission], { parse_mode: "HTML" });
        return { success: false };
    }

    return {
        success: true,
        channelId: channelConfig.channelId,
        channelTitle: channelConfig.channelTitle,
    };
}

function createUserSelectionKeyboard(requestId: number): Keyboard {
    return new Keyboard()
        .requestUsers("–í—ã–±—Ä–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", requestId, {
            user_is_bot: false,
            max_quantity: 1,
        })
        .resized()
        .oneTime();
}

async function processUserOperation(
    ctx: SessionContext,
    channelId: string,
    channelTitle: string | undefined,
    targetUserId: number,
    operation: "add" | "remove",
): Promise<unknown> {
    const targetPermissions = await checkUserChannelPermissions(channelId, targetUserId);

    if (!targetPermissions?.isAdmin) {
        return ctx.reply(
            "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.",
            {
                parse_mode: "HTML",
            },
        );
    }

    let message = "";

    if (operation === "add") {
        addNotificationUser(channelId, targetUserId);

        message = `‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!\n\n`;
        message += `üì¢ <b>–ö–∞–Ω–∞–ª:</b> ${formatChannelInfo(channelId, channelTitle)}\n`;
        message += `üÜî <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>${escapeHtml(String(targetUserId))}</code>\n\n`;
        message += `–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ–≥–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω—è—é—Ç—Å—è –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞.`;
    } else {
        removeNotificationUser(channelId, targetUserId);

        message = `‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π!\n\n`;
        message += `üì¢ <b>–ö–∞–Ω–∞–ª:</b> ${formatChannelInfo(channelId, channelTitle)}\n`;
        message += `üÜî <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> <code>${escapeHtml(String(targetUserId))}</code>`;
    }

    return ctx.reply(message, { parse_mode: "HTML" });
}

async function handleUserSelection(
    ctx: SessionContext,
    args: string | RegExpMatchArray,
    channelId: string,
    channelTitle: string | undefined,
    operation: "add" | "remove",
): Promise<unknown> {
    if (!args || typeof args !== "string" || args.trim() === "") {
        ctx.session.awaitingNotificationUserSelection = operation;

        const keyboard = createUserSelectionKeyboard(operation === "add" ? 1 : 2);
        const action = operation === "add" ? "–¥–æ–±–∞–≤–ª–µ–Ω–∏—è" : "—É–¥–∞–ª–µ–Ω–∏—è";
        const preposition = operation === "add" ? "–≤" : "–∏–∑";

        return ctx.reply(
            `üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è ${action} ${preposition} —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.`,
            { reply_markup: keyboard, parse_mode: "HTML" },
        );
    }

    const targetIdentifier = (args as string).trim();
    const targetUser = await resolveUserIdentifier(targetIdentifier, channelId);

    if (!targetUser) {
        return ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.");
    }

    return processUserOperation(ctx, channelId, channelTitle, targetUser.id, operation);
}

export function registerNotificationCommands(): void {
    bot.command("notify_add", async (ctx) => {
        const validation = await validateNotificationAccess(ctx);
        if (!validation.success || !validation.channelId) return;

        await handleUserSelection(ctx, ctx.match, validation.channelId, validation.channelTitle, "add");
    });

    bot.command("notify_remove", async (ctx) => {
        const validation = await validateNotificationAccess(ctx);
        if (!validation.success || !validation.channelId) return;

        await handleUserSelection(ctx, ctx.match, validation.channelId, validation.channelTitle, "remove");
    });

    bot.command("notify_list", async (ctx) => {
        const validation = await validateNotificationAccess(ctx, "isAdmin");
        if (!validation.success || !validation.channelId) return;

        const notificationUserIds = getNotificationUsers(validation.channelId);

        let message = `üîî <b>–°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n`;
        message += `üì¢ <b>–ö–∞–Ω–∞–ª:</b> ${formatChannelInfo(validation.channelId, validation.channelTitle)}\n\n`;

        if (notificationUserIds.length === 0) {
            message += `–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/notify_add</code> –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.`;
        } else {
            message += `üë• <b>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n`;

            for (const targetUserId of notificationUserIds) {
                try {
                    const chatMember = await bot.api.getChatMember(validation.channelId, targetUserId);
                    const user = chatMember.user;
                    message += `‚Ä¢ ${escapeHtml(user.first_name)}`;
                    if (user.username) {
                        message += ` (@${escapeHtml(user.username)})`;
                    }
                    message += ` <code>${escapeHtml(String(targetUserId))}</code>\n`;
                } catch {
                    message += `‚Ä¢ ID: <code>${escapeHtml(String(targetUserId))}</code> (–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)\n`;
                }
            }

            message += `\n<b>–í—Å–µ–≥–æ:</b> ${notificationUserIds.length}`;
        }

        return ctx.reply(message, { parse_mode: "HTML" });
    });
}

export function registerNotificationUserSelectionHandler(): void {
    bot.chatType("private").on("message:users_shared", async (ctx) => {
        const pendingOperation = ctx.session.awaitingNotificationUserSelection;

        if (!pendingOperation) {
            return;
        }

        const validation = await validateNotificationAccess(ctx);
        if (!validation.success || !validation.channelId) {
            ctx.session.awaitingNotificationUserSelection = undefined;
            return;
        }

        const sharedUsers = ctx.message.users_shared.users;
        const firstUser = sharedUsers[0];

        if (!sharedUsers || !firstUser) {
            ctx.session.awaitingNotificationUserSelection = undefined;
            return ctx.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        }

        const targetUserId = firstUser.user_id;

        ctx.session.awaitingNotificationUserSelection = undefined;

        return processUserOperation(ctx, validation.channelId, validation.channelTitle, targetUserId, pendingOperation);
    });
}
