import { Keyboard } from "grammy";
import { bot } from "../config/bot";
import type { SessionContext } from "../config/session";
import {
    resolveChannel,
    formatChannelInfo,
    checkChannelRequirements,
    formatChannelRequirements,
    allRequirementsPassed,
    escapeMarkdown,
} from "../utils";

export function showChannelSelectionUI(errorMessage?: string): { text: string; keyboard: Keyboard } {
    const keyboard = new Keyboard()
        .requestChat("–í—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª", 1, {
            chat_is_channel: true,
            bot_is_member: true,
        })
        .resized()
        .oneTime();

    let text =
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –∏–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n/setchannel <@channel –∏–ª–∏ ID>\n\n–ü—Ä–∏–º–µ—Ä: /setchannel @mychannel";

    if (errorMessage) {
        text = `‚ùå ${errorMessage}\n\n${text}`;
    }

    return { text, keyboard };
}

async function processChannelSelection(ctx: SessionContext, channelIdentifier: string): Promise<void> {
    const chatId = ctx.chat!.id;

    const workingMsg = await ctx.reply("–ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–∞...");
    const channelInfo = await resolveChannel(channelIdentifier);

    if (!channelInfo) {
        await bot.api.deleteMessage(chatId, workingMsg.message_id).catch(() => {});
        const errorMessage =
            "–ù–µ —É–¥–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–º—É –∫–∞–Ω–∞–ª—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.";
        const { text, keyboard } = showChannelSelectionUI(errorMessage);
        ctx.session.awaitingChannelSelection = true;
        await ctx.reply(text, { reply_markup: keyboard });
        return;
    }

    ctx.session.channelConfig = {
        channelId: channelInfo.id,
        channelTitle: channelInfo.title,
    };

    await bot.api.editMessageText(chatId, workingMsg.message_id, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –±–æ—Ç–∞...");

    const requirements = await checkChannelRequirements(channelInfo.id);

    await bot.api.deleteMessage(chatId, workingMsg.message_id).catch(() => {});

    let responseText = `‚úÖ –ö–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n`;
    responseText += `–í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –±—É–¥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –≤: ${formatChannelInfo(channelInfo.id, channelInfo.title)}\n\n`;
    responseText += `üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n${formatChannelRequirements(requirements)}`;

    if (!allRequirementsPassed(requirements)) {
        responseText += `\n\n`;

        if (!requirements.foreignAgentBlurbConfigured) {
            responseText += `**–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \`${escapeMarkdown("/set_fa_blurb")} <–≤–∞—à —Ç–µ–∫—Å—Ç>\` –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞. –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞ –º–æ–≥—É—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.\n\n`;
        }

        const keyboard = new Keyboard()
            .requestChat("–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫–∞–Ω–∞–ª", 2, {
                chat_is_channel: true,
                bot_is_member: true,
            })
            .text("/removechannel")
            .resized()
            .oneTime();

        ctx.session.awaitingChannelSelection = true;
        await ctx.reply(responseText, { reply_markup: keyboard, parse_mode: "Markdown" });
    } else {
        responseText += `\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ.`;
        await ctx.reply(responseText, { reply_markup: { remove_keyboard: true } });
    }
}

export function registerChannelCommands(): void {
    bot.command("setchannel", async (ctx) => {
        const userId = ctx.from?.id;

        if (!userId) {
            return ctx.reply("–ù–µ —É–¥–∞–µ—Ç—Å—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
        }

        const args = ctx.match;
        if (!args || typeof args !== "string" || args.trim() === "") {
            const { text, keyboard } = showChannelSelectionUI();
            ctx.session.awaitingChannelSelection = true;
            return ctx.reply(text, { reply_markup: keyboard });
        }

        const channelIdentifier = args.trim();
        return processChannelSelection(ctx, channelIdentifier);
    });

    bot.command("removechannel", async (ctx) => {
        const userId = ctx.from?.id;

        if (!userId) {
            return ctx.reply("–ù–µ —É–¥–∞–µ—Ç—Å—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
        }

        if (!ctx.session.channelConfig) {
            return ctx.reply("–£ –≤–∞—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–∞–Ω–∞–ª.");
        }

        delete ctx.session.channelConfig;

        return ctx.reply(
            "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.\n\n–í–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –Ω–∏ –≤ –∫–∞–∫–æ–π –∫–∞–Ω–∞–ª.",
        );
    });

    bot.on("message:chat_shared", async (ctx) => {
        const userId = ctx.from?.id;

        if (!userId) {
            return ctx.reply("–ù–µ —É–¥–∞–µ—Ç—Å—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
        }

        if (!ctx.session.awaitingChannelSelection) {
            return;
        }

        ctx.session.awaitingChannelSelection = false;
        const chatShared = ctx.message.chat_shared;

        if (chatShared.request_id !== 1 && chatShared.request_id !== 2) {
            return;
        }

        const channelId = chatShared.chat_id.toString();
        return processChannelSelection(ctx, channelId);
    });
}
